From e4a6fa1322e960b7b96a95b7a644f5e822cd42a3 Mon Sep 17 00:00:00 2001
From: hamza <sahamzashah19@gmail.com>
Date: Sat, 31 Aug 2024 14:26:24 +0500
Subject: [PATCH] fixed issues

---
 client3.py     | 22 +++++++++++++++-------
 client_test.py | 38 ++++++++++++++++++++++----------------
 2 files changed, 37 insertions(+), 23 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..1363b1e 100644
--- a/client3.py
+++ b/client3.py
@@ -21,6 +21,7 @@
 import json
 import random
 import urllib.request
+from cgitb import small
 
 # Server API URLs
 QUERY = "http://localhost:8080/query?id={}"
@@ -31,29 +32,36 @@ N = 500
 
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2  # Correctly calculate the stock price
     return stock, bid_price, ask_price, price
 
 
+
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return None  # Avoid division by zero
+    return price_a / price_b  # Calculate and return the correct ratio
 
 
 # Main
 if __name__ == "__main__":
+    prices = {}  # Dictionary to store stock prices
+
     # Query the price once every N seconds.
     for _ in iter(range(N)):
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
-        """ ----------- Update to get the ratio --------------- """
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
-            print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
+            prices[stock] = price  # Store the price in the dictionary
+            print(f"Quoted {stock} at (bid:{bid_price}, ask:{ask_price}, price:{price})")
+
+        # Calculate and print the ratio for the two stocks
+        if 'ABC' in prices and 'DEF' in prices:
+            ratio = getRatio(prices['ABC'], prices['DEF'])
+            print(f"Ratio {ratio}")
 
-        print("Ratio %s" % getRatio(price, price))
diff --git a/client_test.py b/client_test.py
index af2bf26..f79379c 100644
--- a/client_test.py
+++ b/client_test.py
@@ -2,24 +2,30 @@ import unittest
 from client3 import getDataPoint
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-
-  """ ------------ Add more unit tests ------------ """
+    def test_getDataPoint_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        # Modify the expected output to match the actual function's return value
+        self.assertEqual(getDataPoint(quotes[0]), ('ABC', 120.48, 121.2, (120.48 + 121.2) / 2))
+        self.assertEqual(getDataPoint(quotes[1]), ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2))
 
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        # Modify the expected output to match the actual function's return value
+        self.assertEqual(getDataPoint(quotes[0]), ('ABC', 120.48, 119.2, (120.48 + 119.2) / 2))
+        self.assertEqual(getDataPoint(quotes[1]), ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2))
 
+    def test_getDataPoint_zeroPrices(self):
+        quotes = [
+            {'top_ask': {'price': 0.0, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 0.0, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'}
+        ]
+        # Modify the expected output to match the actual function's return value
+        self.assertEqual(getDataPoint(quotes[0]), ('ABC', 0.0, 0.0, 0.0))
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.46.0.windows.1

